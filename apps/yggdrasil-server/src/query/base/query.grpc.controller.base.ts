/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QueryService } from "../query.service";
import { QueryCreateInput } from "./QueryCreateInput";
import { QueryWhereInput } from "./QueryWhereInput";
import { QueryWhereUniqueInput } from "./QueryWhereUniqueInput";
import { QueryFindManyArgs } from "./QueryFindManyArgs";
import { QueryUpdateInput } from "./QueryUpdateInput";
import { Query } from "./Query";

export class QueryGrpcControllerBase {
  constructor(protected readonly service: QueryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Query })
  @GrpcMethod("QueryService", "createQuery")
  async createQuery(@common.Body() data: QueryCreateInput): Promise<Query> {
    return await this.service.createQuery({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Query] })
  @ApiNestedQuery(QueryFindManyArgs)
  @GrpcMethod("QueryService", "queries")
  async queries(@common.Req() request: Request): Promise<Query[]> {
    const args = plainToClass(QueryFindManyArgs, request.query);
    return this.service.queries({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Query })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QueryService", "query")
  async query(
    @common.Param() params: QueryWhereUniqueInput
  ): Promise<Query | null> {
    const result = await this.service.query({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Query })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QueryService", "updateQuery")
  async updateQuery(
    @common.Param() params: QueryWhereUniqueInput,
    @common.Body() data: QueryUpdateInput
  ): Promise<Query | null> {
    try {
      return await this.service.updateQuery({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Query })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QueryService", "deleteQuery")
  async deleteQuery(
    @common.Param() params: QueryWhereUniqueInput
  ): Promise<Query | null> {
    try {
      return await this.service.deleteQuery({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
