/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ResultService } from "../result.service";
import { ResultCreateInput } from "./ResultCreateInput";
import { ResultWhereInput } from "./ResultWhereInput";
import { ResultWhereUniqueInput } from "./ResultWhereUniqueInput";
import { ResultFindManyArgs } from "./ResultFindManyArgs";
import { ResultUpdateInput } from "./ResultUpdateInput";
import { Result } from "./Result";

export class ResultGrpcControllerBase {
  constructor(protected readonly service: ResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Result })
  @GrpcMethod("ResultService", "createResult")
  async createResult(@common.Body() data: ResultCreateInput): Promise<Result> {
    return await this.service.createResult({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Result] })
  @ApiNestedQuery(ResultFindManyArgs)
  @GrpcMethod("ResultService", "results")
  async results(@common.Req() request: Request): Promise<Result[]> {
    const args = plainToClass(ResultFindManyArgs, request.query);
    return this.service.results({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Result })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ResultService", "result")
  async result(
    @common.Param() params: ResultWhereUniqueInput
  ): Promise<Result | null> {
    const result = await this.service.result({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Result })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ResultService", "updateResult")
  async updateResult(
    @common.Param() params: ResultWhereUniqueInput,
    @common.Body() data: ResultUpdateInput
  ): Promise<Result | null> {
    try {
      return await this.service.updateResult({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Result })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ResultService", "deleteResult")
  async deleteResult(
    @common.Param() params: ResultWhereUniqueInput
  ): Promise<Result | null> {
    try {
      return await this.service.deleteResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
